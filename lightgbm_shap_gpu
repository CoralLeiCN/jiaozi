{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":10385,"databundleVersionId":298493,"sourceType":"competition"}],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip uninstall shap --yes","metadata":{"execution":{"iopub.status.busy":"2024-08-08T22:20:29.053967Z","iopub.execute_input":"2024-08-08T22:20:29.054654Z","iopub.status.idle":"2024-08-08T22:20:31.009955Z","shell.execute_reply.started":"2024-08-08T22:20:29.054618Z","shell.execute_reply":"2024-08-08T22:20:31.008836Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"Found existing installation: shap 0.44.1\nUninstalling shap-0.44.1:\n  Successfully uninstalled shap-0.44.1\n","output_type":"stream"}]},{"cell_type":"code","source":"!git clone https://github.com/shap/shap.git","metadata":{"execution":{"iopub.status.busy":"2024-08-08T22:20:58.791780Z","iopub.execute_input":"2024-08-08T22:20:58.792196Z","iopub.status.idle":"2024-08-08T22:21:14.532867Z","shell.execute_reply.started":"2024-08-08T22:20:58.792162Z","shell.execute_reply":"2024-08-08T22:21:14.531703Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"Cloning into 'shap'...\nremote: Enumerating objects: 17046, done.\u001b[K\nremote: Counting objects: 100% (2895/2895), done.\u001b[K\nremote: Compressing objects: 100% (484/484), done.\u001b[K\nremote: Total 17046 (delta 2610), reused 2520 (delta 2410), pack-reused 14151\u001b[K\nReceiving objects: 100% (17046/17046), 268.72 MiB | 34.65 MiB/s, done.\nResolving deltas: 100% (12037/12037), done.\nUpdating files: 100% (505/505), done.\n","output_type":"stream"}]},{"cell_type":"code","source":"# export CUDA_PATH=/usr/local/cuda-10.1/\n!export CUDA_PATH=/usr/local/cuda-12.1","metadata":{"execution":{"iopub.status.busy":"2024-08-08T22:21:17.366116Z","iopub.execute_input":"2024-08-08T22:21:17.366459Z","iopub.status.idle":"2024-08-08T22:21:18.371462Z","shell.execute_reply.started":"2024-08-08T22:21:17.366433Z","shell.execute_reply":"2024-08-08T22:21:18.370258Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"!which nvcc","metadata":{"execution":{"iopub.status.busy":"2024-08-08T22:21:21.798327Z","iopub.execute_input":"2024-08-08T22:21:21.798721Z","iopub.status.idle":"2024-08-08T22:21:22.832261Z","shell.execute_reply.started":"2024-08-08T22:21:21.798686Z","shell.execute_reply":"2024-08-08T22:21:22.831117Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"/opt/conda/bin/nvcc\n","output_type":"stream"}]},{"cell_type":"code","source":"!pip install git+git://github.com/shap/shap@v0.46.0","metadata":{"execution":{"iopub.status.busy":"2024-08-08T22:25:16.034648Z","iopub.execute_input":"2024-08-08T22:25:16.035503Z","iopub.status.idle":"2024-08-08T22:27:28.059208Z","shell.execute_reply.started":"2024-08-08T22:25:16.035464Z","shell.execute_reply":"2024-08-08T22:27:28.058184Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"Collecting git+git://github.com/shap/shap@v0.46.0\n  Cloning git://github.com/shap/shap (to revision v0.46.0) to /tmp/pip-req-build-f3dhra6s\n  Running command git clone --filter=blob:none --quiet git://github.com/shap/shap /tmp/pip-req-build-f3dhra6s\n  fatal: unable to connect to github.com:\n  github.com[0: 140.82.116.4]: errno=Connection timed out\n\n  \u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\n  \n  \u001b[31m×\u001b[0m \u001b[32mgit clone --\u001b[0m\u001b[32mfilter\u001b[0m\u001b[32m=\u001b[0m\u001b[32mblob\u001b[0m\u001b[32m:none --quiet git:\u001b[0m\u001b[32m/\u001b[0m\u001b[32m/github.com/shap/\u001b[0m\u001b[32mshap\u001b[0m\u001b[32m \u001b[0m\u001b[32m/tmp/\u001b[0m\u001b[32mpip-req-build-f3dhra6s\u001b[0m did not run successfully.\n  \u001b[31m│\u001b[0m exit code: \u001b[1;36m128\u001b[0m\n  \u001b[31m╰─>\u001b[0m See above for output.\n  \n  \u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\n\u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\n\n\u001b[31m×\u001b[0m \u001b[32mgit clone --\u001b[0m\u001b[32mfilter\u001b[0m\u001b[32m=\u001b[0m\u001b[32mblob\u001b[0m\u001b[32m:none --quiet git:\u001b[0m\u001b[32m/\u001b[0m\u001b[32m/github.com/shap/\u001b[0m\u001b[32mshap\u001b[0m\u001b[32m \u001b[0m\u001b[32m/tmp/\u001b[0m\u001b[32mpip-req-build-f3dhra6s\u001b[0m did not run successfully.\n\u001b[31m│\u001b[0m exit code: \u001b[1;36m128\u001b[0m\n\u001b[31m╰─>\u001b[0m See above for output.\n\n\u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn import datasets\n# coding: utf-8\nimport datetime\nimport gc\nimport math\nimport os\nimport seaborn as sns\nimport time\nimport warnings\nfrom contextlib import contextmanager\nfrom sklearn.model_selection import train_test_split\n\n\nimport lightgbm as lgb\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import (auc, average_precision_score, confusion_matrix,\n                             mean_squared_error, precision_recall_curve,\n                             roc_curve)\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.metrics import mean_squared_error","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-08T22:18:01.544012Z","iopub.execute_input":"2024-08-08T22:18:01.544330Z","iopub.status.idle":"2024-08-08T22:18:05.730190Z","shell.execute_reply.started":"2024-08-08T22:18:01.544299Z","shell.execute_reply":"2024-08-08T22:18:05.729394Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/santander-customer-transaction-prediction/train.csv')","metadata":{"execution":{"iopub.status.busy":"2024-08-08T22:18:05.731189Z","iopub.execute_input":"2024-08-08T22:18:05.731680Z","iopub.status.idle":"2024-08-08T22:18:15.792260Z","shell.execute_reply.started":"2024-08-08T22:18:05.731656Z","shell.execute_reply":"2024-08-08T22:18:15.791421Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"NOT_FEATURES = ['ID_code', 'target']\nFEATURES = [c for c in df.columns if c not in NOT_FEATURES]","metadata":{"execution":{"iopub.status.busy":"2024-08-08T22:18:15.794645Z","iopub.execute_input":"2024-08-08T22:18:15.795317Z","iopub.status.idle":"2024-08-08T22:18:15.799570Z","shell.execute_reply.started":"2024-08-08T22:18:15.795281Z","shell.execute_reply":"2024-08-08T22:18:15.798654Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"train_df = df[FEATURES].head(500)\ntarget = df['target'].head(500)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T22:18:15.800663Z","iopub.execute_input":"2024-08-08T22:18:15.800946Z","iopub.status.idle":"2024-08-08T22:18:15.913598Z","shell.execute_reply.started":"2024-08-08T22:18:15.800923Z","shell.execute_reply":"2024-08-08T22:18:15.912822Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"params ={\n    'task': 'train',\n    'boosting': 'gbdt',\n    'objective': 'binary',\n    'learning_rate': 0.1,\n    'early_stopping_round': 50,\n    'device': 'gpu',\n    }","metadata":{"execution":{"iopub.status.busy":"2024-08-08T22:18:15.914996Z","iopub.execute_input":"2024-08-08T22:18:15.915288Z","iopub.status.idle":"2024-08-08T22:18:15.919577Z","shell.execute_reply.started":"2024-08-08T22:18:15.915263Z","shell.execute_reply":"2024-08-08T22:18:15.918781Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"%%time\ntrain_x, valid_x, train_y, valid_y = train_test_split(\n    train_df, target, test_size=0.33, random_state=42)       \nlgb_train = lgb.Dataset(train_x,\n                        label=train_y,\n                        free_raw_data=False)\nlgb_test = lgb.Dataset(valid_x,\n                       label=valid_y,\n                       free_raw_data=False)\n\n\nclf = lgb.train(\n                params,\n                lgb_train,\n                valid_sets=[lgb_train, lgb_test],\n                valid_names=['train', 'test'],\n                num_boost_round=10000,\n                )","metadata":{"execution":{"iopub.status.busy":"2024-08-08T22:18:15.920595Z","iopub.execute_input":"2024-08-08T22:18:15.920883Z","iopub.status.idle":"2024-08-08T22:18:21.020737Z","shell.execute_reply.started":"2024-08-08T22:18:15.920859Z","shell.execute_reply":"2024-08-08T22:18:21.019851Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"[LightGBM] [Info] Number of positive: 31, number of negative: 304\n[LightGBM] [Info] This is the GPU trainer!!\n[LightGBM] [Info] Total Bins 22421\n[LightGBM] [Info] Number of data points in the train set: 335, number of used features: 200\n[LightGBM] [Info] Using GPU Device: Tesla T4, Vendor: NVIDIA Corporation\n[LightGBM] [Info] Compiling OpenCL Kernel with 256 bins...\n","output_type":"stream"},{"name":"stderr","text":"1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n1 warning generated.\n","output_type":"stream"},{"name":"stdout","text":"[LightGBM] [Info] GPU programs have been built\n[LightGBM] [Info] Size of histogram bin entry: 8\n[LightGBM] [Info] 200 dense feature groups (0.06 MB) transferred to GPU in 0.001509 secs. 0 sparse feature groups\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.092537 -> initscore=-2.283040\n[LightGBM] [Info] Start training from score -2.283040\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\nTraining until validation scores don't improve for 50 rounds\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\nEarly stopping, best iteration is:\n[2]\ttrain's binary_logloss: 0.267866\ttest's binary_logloss: 0.304343\nCPU times: user 5.89 s, sys: 248 ms, total: 6.14 s\nWall time: 5.09 s\n","output_type":"stream"}]},{"cell_type":"code","source":"import shap","metadata":{"execution":{"iopub.status.busy":"2024-08-08T22:18:21.021988Z","iopub.execute_input":"2024-08-08T22:18:21.022278Z","iopub.status.idle":"2024-08-08T22:18:26.415299Z","shell.execute_reply.started":"2024-08-08T22:18:21.022253Z","shell.execute_reply":"2024-08-08T22:18:26.414503Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"%%time\nexplainer = shap.explainers.GPUTree(clf)\nshap_values = explainer(train_x)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T22:18:26.416326Z","iopub.execute_input":"2024-08-08T22:18:26.416875Z","iopub.status.idle":"2024-08-08T22:18:27.136382Z","shell.execute_reply.started":"2024-08-08T22:18:26.416849Z","shell.execute_reply":"2024-08-08T22:18:27.135543Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"cuda extension was not built during install!\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)","File \u001b[0;32m<timed exec>:2\u001b[0m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/shap/explainers/_tree.py:246\u001b[0m, in \u001b[0;36mTreeExplainer.__call__\u001b[0;34m(self, X, y, interactions, check_additivity)\u001b[0m\n\u001b[1;32m    243\u001b[0m     feature_names \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mgetattr\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdata_feature_names\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m)\n\u001b[1;32m    245\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m interactions:\n\u001b[0;32m--> 246\u001b[0m     v \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mshap_values\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfrom_call\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcheck_additivity\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcheck_additivity\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mapproximate\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapproximate\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    247\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(v, \u001b[38;5;28mlist\u001b[39m):\n\u001b[1;32m    248\u001b[0m         v \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mstack(v, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m)  \u001b[38;5;66;03m# put outputs at the end\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/shap/explainers/_gpu_tree.py:106\u001b[0m, in \u001b[0;36mGPUTreeExplainer.shap_values\u001b[0;34m(self, X, y, tree_limit, approximate, check_additivity, from_call)\u001b[0m\n\u001b[1;32m    103\u001b[0m transform \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmodel\u001b[38;5;241m.\u001b[39mget_transform()\n\u001b[1;32m    105\u001b[0m \u001b[38;5;66;03m# run the core algorithm using the C extension\u001b[39;00m\n\u001b[0;32m--> 106\u001b[0m \u001b[43massert_import\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcext_gpu\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m    107\u001b[0m phi \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mzeros((X\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m0\u001b[39m], X\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m1\u001b[39m] \u001b[38;5;241m+\u001b[39m \u001b[38;5;241m1\u001b[39m, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmodel\u001b[38;5;241m.\u001b[39mnum_outputs))\n\u001b[1;32m    108\u001b[0m _cext_gpu\u001b[38;5;241m.\u001b[39mdense_tree_shap(\n\u001b[1;32m    109\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmodel\u001b[38;5;241m.\u001b[39mchildren_left, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmodel\u001b[38;5;241m.\u001b[39mchildren_right, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmodel\u001b[38;5;241m.\u001b[39mchildren_default,\n\u001b[1;32m    110\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmodel\u001b[38;5;241m.\u001b[39mfeatures, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmodel\u001b[38;5;241m.\u001b[39mthresholds, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmodel\u001b[38;5;241m.\u001b[39mvalues,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    114\u001b[0m     output_transform_codes[transform], \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[1;32m    115\u001b[0m )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/shap/utils/_general.py:19\u001b[0m, in \u001b[0;36massert_import\u001b[0;34m(package_name)\u001b[0m\n\u001b[1;32m     17\u001b[0m msg,e \u001b[38;5;241m=\u001b[39m import_errors[package_name]\n\u001b[1;32m     18\u001b[0m \u001b[38;5;28mprint\u001b[39m(msg)\n\u001b[0;32m---> 19\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m e\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/shap/explainers/_gpu_tree.py:8\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01m_tree\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m TreeExplainer, feature_perturbation_codes, output_transform_codes\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m----> 8\u001b[0m     \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m _cext_gpu\n\u001b[1;32m      9\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mImportError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m     10\u001b[0m     record_import_error(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcext_gpu\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcuda extension was not built during install!\u001b[39m\u001b[38;5;124m\"\u001b[39m, e)\n","\u001b[0;31mImportError\u001b[0m: cannot import name '_cext_gpu' from partially initialized module 'shap' (most likely due to a circular import) (/opt/conda/lib/python3.10/site-packages/shap/__init__.py)"],"ename":"ImportError","evalue":"cannot import name '_cext_gpu' from partially initialized module 'shap' (most likely due to a circular import) (/opt/conda/lib/python3.10/site-packages/shap/__init__.py)","output_type":"error"}]},{"cell_type":"code","source":"%%time\nshap.plots.waterfall(shap_values[0])","metadata":{"execution":{"iopub.status.busy":"2024-08-08T22:18:27.139363Z","iopub.execute_input":"2024-08-08T22:18:27.139710Z","iopub.status.idle":"2024-08-08T22:18:28.115454Z","shell.execute_reply.started":"2024-08-08T22:18:27.139684Z","shell.execute_reply":"2024-08-08T22:18:28.114582Z"},"trusted":true},"execution_count":12,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","File \u001b[0;32m<timed eval>:1\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'shap_values' is not defined"],"ename":"NameError","evalue":"name 'shap_values' is not defined","output_type":"error"}]},{"cell_type":"code","source":"!nvidia-smi","metadata":{"execution":{"iopub.status.busy":"2024-08-08T22:17:29.088409Z","iopub.execute_input":"2024-08-08T22:17:29.088815Z","iopub.status.idle":"2024-08-08T22:17:30.174703Z","shell.execute_reply.started":"2024-08-08T22:17:29.088770Z","shell.execute_reply":"2024-08-08T22:17:30.173586Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Thu Aug  8 22:17:29 2024       \n+-----------------------------------------------------------------------------------------+\n| NVIDIA-SMI 550.90.07              Driver Version: 550.90.07      CUDA Version: 12.4     |\n|-----------------------------------------+------------------------+----------------------+\n| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |\n|                                         |                        |               MIG M. |\n|=========================================+========================+======================|\n|   0  Tesla T4                       Off |   00000000:00:04.0 Off |                    0 |\n| N/A   40C    P8              9W /   70W |       1MiB /  15360MiB |      0%      Default |\n|                                         |                        |                  N/A |\n+-----------------------------------------+------------------------+----------------------+\n|   1  Tesla T4                       Off |   00000000:00:05.0 Off |                    0 |\n| N/A   39C    P8              9W /   70W |       1MiB /  15360MiB |      0%      Default |\n|                                         |                        |                  N/A |\n+-----------------------------------------+------------------------+----------------------+\n                                                                                         \n+-----------------------------------------------------------------------------------------+\n| Processes:                                                                              |\n|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |\n|        ID   ID                                                               Usage      |\n|=========================================================================================|\n|  No running processes found                                                             |\n+-----------------------------------------------------------------------------------------+\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}